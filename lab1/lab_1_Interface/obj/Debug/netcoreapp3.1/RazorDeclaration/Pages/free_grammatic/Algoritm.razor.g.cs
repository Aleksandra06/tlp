#pragma checksum "C:\Users\voen1\Documents\Course_4\[ТЯП] Теория языков программирования\lab1\lab1\lab_1_Interface\Pages\Free_grammatic\Algoritm.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "268129b813635df50afba6f47b33b02a61287aec"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace lab_1_Interface.Pages.Free_grammatic
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\voen1\Documents\Course_4\[ТЯП] Теория языков программирования\lab1\lab1\lab_1_Interface\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\voen1\Documents\Course_4\[ТЯП] Теория языков программирования\lab1\lab1\lab_1_Interface\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\voen1\Documents\Course_4\[ТЯП] Теория языков программирования\lab1\lab1\lab_1_Interface\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\voen1\Documents\Course_4\[ТЯП] Теория языков программирования\lab1\lab1\lab_1_Interface\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\voen1\Documents\Course_4\[ТЯП] Теория языков программирования\lab1\lab1\lab_1_Interface\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\voen1\Documents\Course_4\[ТЯП] Теория языков программирования\lab1\lab1\lab_1_Interface\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\voen1\Documents\Course_4\[ТЯП] Теория языков программирования\lab1\lab1\lab_1_Interface\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\voen1\Documents\Course_4\[ТЯП] Теория языков программирования\lab1\lab1\lab_1_Interface\_Imports.razor"
using lab_1_Interface;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\voen1\Documents\Course_4\[ТЯП] Теория языков программирования\lab1\lab1\lab_1_Interface\_Imports.razor"
using lab_1_Interface.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\voen1\Documents\Course_4\[ТЯП] Теория языков программирования\lab1\lab1\lab_1_Interface\_Imports.razor"
using MatBlazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\voen1\Documents\Course_4\[ТЯП] Теория языков программирования\lab1\lab1\lab_1_Interface\_Imports.razor"
using Blazored.LocalStorage;

#line default
#line hidden
#nullable disable
#nullable restore
#line 1 "C:\Users\voen1\Documents\Course_4\[ТЯП] Теория языков программирования\lab1\lab1\lab_1_Interface\Pages\Free_grammatic\Algoritm.razor"
using lab_1_Interface.Models;

#line default
#line hidden
#nullable disable
    public partial class Algoritm : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 102 "C:\Users\voen1\Documents\Course_4\[ТЯП] Теория языков программирования\lab1\lab1\lab_1_Interface\Pages\Free_grammatic\Algoritm.razor"
       
    Grammatic grammatic = new Grammatic();

    string input_vt_text, input_vn_text;
    string[] split_vt_text, split_vn_text;

    string newRegularLeft, newRegularRight;

    static string debug;

    protected override void OnInitialized()
    {
        grammatic.VT = new List<string>();
        grammatic.VN = new List<string>();
        grammatic.Regulation = new List<Regular>();
        grammatic.lamb = new string("lamb");
    }

    void onClickNewRegular()
    {
        if (!string.IsNullOrWhiteSpace(newRegularLeft) && !(string.IsNullOrWhiteSpace(newRegularRight))) {

            grammatic.Regulation = ConvertStringToRegular(newRegularLeft + "->" + newRegularRight + "\r\n", grammatic);

        }
    }


    public static List<Regular> ConvertStringToRegular(string str, Grammatic grammatic)
    {
        List<Regular> list = new List<Regular>();
        while (str.Length > 1) {
            Regular regular = new Regular();
            regular.right = new List<List<string>>();
            var index = str.IndexOf("-");
            regular.left = str.Substring(0, index);

            str = str.Substring(index + 2);
            debug = ""; // DEBUG

            foreach (char iterator in str) {
                debug += (int)iterator;
            }

            index = str.IndexOf("\n");

            if (index < 0) {
                var tmp1 = ConvertStringToStringList(str.Substring(0), "|", grammatic);
                foreach (var tmp in tmp1) {
                    regular.right.Add(ConvertStringToStringList(tmp, grammatic));
                }
                list.Add(regular);
                break;
            }

            var tmp2 = ConvertStringToStringList(str.Substring(0, index), "|", grammatic);
            foreach (var tmp in tmp2) {
                regular.right.Add(ConvertStringToStringList(tmp, grammatic));
            }


            str = str.Substring(index + 1);
            list.Add(regular);
        }

        return list;
    }

    public static List<string> ConvertStringToStringList(string str, Grammatic grammatic)
    {
        List<string> list = new List<string>();
        // str = aaT | lamd
        int i = 0;
        int start = 0;

        if (grammatic.lamb.Equals(str)) {
            list.Add(grammatic.lamb);
            return list;
        }

        while (i < str.Length && grammatic.VT.FindIndex(t => t == str.Substring(i, 1)) > -1) {
            i++;
        }
        if (i > 0) {
            list.Add(str.Substring(start, i));
        }
        start = i;
        int j = 0;
        while (i < str.Length && grammatic.VN.FindIndex(t => t == str.Substring(i, 1)) > -1) {
            list.Add(str.Substring(start, 1));
            i++;
            start = i;
        }
        if (i > start) {
            list.Add(str.Substring(start, j));
        }

        start = i;
        j = 0;
        while (i < str.Length && grammatic.VT.FindIndex(t => t == str.Substring(i, 1)) > -1) {
            i++;
            j++;
        }

        if (i > start) {
            list.Add(str.Substring(start, j));
        }

        // list = aa, T
        return list;
    }

    private static List<string> ConvertStringToStringList(string str, string border, Grammatic grammatic)
    {
        List<string> list = new List<string>();
        while (str.Length > 0) {
            var index = str.IndexOf(border);
            if (index == -1) {
                break;
            }
            list.Add(str.Substring(0, index));
            str = str.Substring(index + 1);
        }

        var index1 = str.IndexOf("\n");
        if (index1 < 0) {
            list.Add(str.Substring(0));
        } else {
            list.Add(str.Substring(0, index1));
        }
        return list;
    }

    void inputVT()
    {
        if (!string.IsNullOrWhiteSpace(input_vt_text)) {
            split_vt_text = input_vt_text.Split(",");
            grammatic.VT = new List<string>();
            foreach (string list in split_vt_text) {
                grammatic.VT.Add(list);
            }
        }
    }

    void inputVN()
    {
        if (!string.IsNullOrWhiteSpace(input_vn_text)) {
            split_vn_text = input_vn_text.Split(",");
            grammatic.VN = new List<string>();
            foreach (string list in split_vn_text) {
                grammatic.VN.Add(list);
            }
        }
    }




#line default
#line hidden
#nullable disable
    }
}
#pragma warning restore 1591
